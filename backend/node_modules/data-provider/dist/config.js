'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cfg = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.dataProvidersConfig = dataProvidersConfig;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LoadingComponent = require('./LoadingComponent');

var _ErrorComponent = require('./ErrorComponent');

var _DataProvider = require('./DataProvider');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cfg = exports.cfg = {
  responseHandler: defaultResponseHandler,
  loadingComponent: _react2.default.createElement(_LoadingComponent.LoadingComponent, null),
  errorComponent: _react2.default.createElement(_ErrorComponent.ErrorComponent, null),
  fetchTimeout: 30 * 1000,
  maxTimeoutRetries: 5
};

function defaultResponseHandler(response) {
  if (!(typeof Response !== 'undefined' && response instanceof Response)) {
    return response;
  }
  if (!response.ok) {
    return _DataProvider.ABORT;
  }
  var contentType = response.headers.get('content-type');
  if (contentType && contentType.includes('application/json')) {
    return response.json();
  }
  return response.text();
}

/**
 * Provides a way to set global configuration options for Data Providers
 */
function dataProvidersConfig(options) {
  options = Object(options);

  Object.keys(cfg).forEach(function (key) {
    return changeCfgOption(options, key);
  });
}

// if supplied options contain given field, override its value in global cfg
function changeCfgOption(options, key) {
  if (expectKey(options, key, _typeof(cfg[key]))) {
    cfg[key] = options[key];
  }
}

// check whether options contain given key and that it is the same type as in cfg
function expectKey(options, key, type) {
  if (key in options) {
    if (_typeof(options[key]) === type) {
      return true;
    }
    // eslint-disable-next-line no-console
    console.warn('Ignoring options key \'' + key + '\' - ' + ('expected type \'' + type + '\', received \'' + _typeof(options[key]) + '\''));
  }
  return false;
}