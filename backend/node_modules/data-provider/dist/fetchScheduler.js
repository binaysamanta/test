'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var runNeededFetch = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(fnArgs) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            neededFetchesInProgress++;
            _context.prev = 1;
            _context.next = 4;
            return (0, _util.call)(fnArgs);

          case 4:
            _context.prev = 4;

            if (--neededFetchesInProgress === 0) {
              runNotNeeded();
            }
            return _context.finish(4);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1,, 4, 7]]);
  }));

  return function runNeededFetch(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.scheduleFetch = scheduleFetch;

var _util = require('./util');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var neededFetchesInProgress = 0;
var fetchIdSeq = 0;
var notNeededQueue = [];

// schedules execution of the fetch based on "needed" flag (needed has priority over !needed)
function scheduleFetch(force, needed, fn) {
  var fetchId = fetchIdSeq++;
  var fnArgs = [fn, fetchId, force];
  if (needed) {
    runNeededFetch(fnArgs);
  } else {
    // defer processing of not-needed in case there are more needed fetches in stack
    setTimeout(scheduleNotNeededFetch, 0, fnArgs);
  }
}

function runNotNeeded() {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = notNeededQueue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var fn = _step.value;

      (0, _util.call)(fn);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  notNeededQueue = [];
}

function scheduleNotNeededFetch(fnArgs) {
  if (neededFetchesInProgress > 0) {
    notNeededQueue.push(fnArgs);
  } else {
    (0, _util.call)(fnArgs);
  }
}