'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ABORT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _config = require('./config');

var _bluebird = require('bluebird');

var _storage = require('./storage');

var _fetchScheduler = require('./fetchScheduler');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird.Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird.Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RETRY = Symbol('RETRY');
var ABORT = exports.ABORT = Symbol('ABORT');

var DataProvider = function () {
  function DataProvider(_ref) {
    var id = _ref.id,
        ref = _ref.ref,
        rawGetData = _ref.rawGetData,
        getData = _ref.getData,
        rawOnData = _ref.rawOnData,
        onData = _ref.onData,
        rawOnAbort = _ref.rawOnAbort,
        onAbort = _ref.onAbort,
        initialData = _ref.initialData,
        responseHandler = _ref.responseHandler,
        _ref$keepAliveFor = _ref.keepAliveFor,
        keepAliveFor = _ref$keepAliveFor === undefined ? 0 : _ref$keepAliveFor;

    _classCallCheck(this, DataProvider);

    this.id = id;
    this.ref = ref;
    this.rawGetData = rawGetData;
    this.getData = getData;
    this.rawOnData = rawOnData;
    this.onData = onData;
    this.rawOnAbort = rawOnAbort;
    this.onAbort = onAbort;
    this.responseHandler = responseHandler;
    this.keepAliveFor = keepAliveFor;
    this.loaded = false; // keeps track of whether the data has already been fetched
    this.error = false; // if we couldn't get any data upon mount or refetch
    this.fetchingCount = 0; // indicates a number of fetches in-progress
    this.expireTimeout = null; // for DPs with keepAlive, it contains timeoutID
    this.hasExpired = false; // for DPs with keepAlive, indicates an expired DP
    this.lastFetchId = -1; // ID of a last successful fetch, helps prevent unnecessary scheduled fetches

    if (initialData !== undefined) {
      this.loaded = true;
      this.onData(initialData);
      this.refreshComponents();
    }
  }

  _createClass(DataProvider, [{
    key: 'refreshComponents',
    value: function refreshComponents() {
      (0, _storage.getUsersForDp)(this.id).forEach(function (_ref2) {
        var refreshFn = _ref2.refreshFn;
        refreshFn && refreshFn();
      });
    }
  }, {
    key: 'updateUser',
    value: function updateUser(isFirst, needed, oldDpPolling) {
      var needFetch = isFirst;
      clearTimeout(this.expireTimeout);
      this.expireTimeout = null;

      if ((0, _storage.getPolling)(this.id) < oldDpPolling) {
        needFetch = true;
      }

      if (!this.loaded && !this.timer) {
        needFetch = true;
      }

      if (needFetch) {
        this.fetch(false, needed);
      }
    }
  }, {
    key: 'suspend',
    value: function suspend() {
      var _this = this;

      this.expireTimeout = setTimeout(function () {
        _this.hasExpired = true;
        (0, _storage.dataProviderExpired)(_this.id);
      }, this.keepAliveFor);
    }
  }, {
    key: 'suspended',
    value: function suspended() {
      return this.expireTimeout != null;
    }
  }, {
    key: 'expired',
    value: function expired() {
      return this.hasExpired;
    }
  }, {
    key: 'scheduleNextFetch',
    value: function scheduleNextFetch() {
      var _this2 = this;

      if ((0, _storage.getPolling)(this.id) === Infinity) {
        return;
      }

      this.timer = setTimeout(function () {
        _this2.fetch(false, false);
      }, (0, _storage.getPolling)(this.id));
    }
  }, {
    key: 'getDataWithRetry',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(retries) {
        var previous = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var timeout, getDataCalls, data;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(retries < 0)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('DataProvider (ref=' + this.ref + ') has timed out.');

              case 2:
                timeout = _bluebird.Promise.delay(_config.cfg.fetchTimeout).then(function () {
                  return RETRY;
                });
                getDataCalls = [this.getData()].concat(_toConsumableArray(previous));
                _context.next = 6;
                return _bluebird.Promise.race([timeout].concat(_toConsumableArray(getDataCalls)));

              case 6:
                data = _context.sent;
                return _context.abrupt('return', data === RETRY ? this.getDataWithRetry(retries - 1, getDataCalls) : data);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getDataWithRetry(_x) {
        return _ref3.apply(this, arguments);
      }

      return getDataWithRetry;
    }()
  }, {
    key: 'fetch',
    value: function fetch(force, needed) {
      (0, _fetchScheduler.scheduleFetch)(force, needed, this.doFetch.bind(this));
    }
  }, {
    key: 'fetching',
    value: function fetching() {
      return this.fetchingCount > 0;
    }

    /**
     * Fetch calls this.getData() to retrieve data and passes it through resolveHandler and then to this.onData().
     * If there already is a fetch in-progress and another fetch() is called concurrently (e.g. nested DP),
     * it will not trigger another getData call, but it will return immediately - UNLESS
     * force parameter is set to true (e.g. useful when data change and refetch() is called)
     */

  }, {
    key: 'doFetch',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(fetchId) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var newerFetchAlreadyFinished, data, errorData, rawResponse, response;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                newerFetchAlreadyFinished = this.lastFetchId > fetchId;

                if (!((0, _storage.getCanceled)(this.id) || !force && this.fetching() || newerFetchAlreadyFinished)) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt('return');

              case 3:
                this.fetchingCount++;
                if (this.timer) {
                  clearTimeout(this.timer);
                }

                data = void 0;
                errorData = void 0;
                _context2.prev = 7;
                _context2.next = 10;
                return this.getDataWithRetry(_config.cfg.maxTimeoutRetries);

              case 10:
                rawResponse = _context2.sent;
                _context2.next = 13;
                return this.responseHandler(rawResponse);

              case 13:
                response = _context2.sent;

                // optionally, we allow supplying data to onAbort via modified responseHandler
                if (response === ABORT || response && response.abort === ABORT) {
                  data = null;
                  errorData = response && response.data;
                } else {
                  data = response;
                }

              case 15:
                _context2.prev = 15;

                this.fetchingCount--;
                return _context2.finish(15);

              case 18:

                if (!(0, _storage.getCanceled)(this.id)) {
                  if (data) {
                    this.loaded = true;
                    this.error = false;
                    this.lastFetchId = fetchId;
                    this.onData(data);
                    this.refreshComponents();
                    // so far force is used only in refetch
                  } else if (force || !this.loaded) {
                    this.loaded = false;
                    this.error = true;
                    this.onAbort(errorData);
                    this.refreshComponents();
                  }
                }
                this.scheduleNextFetch();

              case 20:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[7,, 15, 18]]);
      }));

      function doFetch(_x3) {
        return _ref4.apply(this, arguments);
      }

      return doFetch;
    }()
  }]);

  return DataProvider;
}();

exports.default = DataProvider;