'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.withRefetch = withRefetch;
exports.withDataProviders = withDataProviders;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require('./util');

var _config = require('./config');

var _storage = require('./storage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var idg = new _util.IdGenerator();

function withRefetch() {
  return function (Component) {
    return function (_React$Component) {
      _inherits(ComponentWithRefetch, _React$Component);

      function ComponentWithRefetch() {
        _classCallCheck(this, ComponentWithRefetch);

        return _possibleConstructorReturn(this, (ComponentWithRefetch.__proto__ || Object.getPrototypeOf(ComponentWithRefetch)).apply(this, arguments));
      }

      _createClass(ComponentWithRefetch, [{
        key: 'render',
        value: function render() {
          var _this2 = this;

          return _react2.default.createElement(Component, _extends({
            refetch: function refetch(dpRef) {
              // Make sure context is updated (shouldComponentUpdate of some
              // parent component might prevent it from being updated)
              _this2.forceUpdate();
              (0, _storage.refetch)(dpRef);
            }
          }, this.props));
        }
      }]);

      return ComponentWithRefetch;
    }(_react2.default.Component);
  };
}

function withDataProviders(getConfig) {
  return function (Component) {
    var _class, _temp;

    return _temp = _class = function (_React$Component2) {
      _inherits(ComponentWithDataProviders, _React$Component2);

      function ComponentWithDataProviders() {
        _classCallCheck(this, ComponentWithDataProviders);

        return _possibleConstructorReturn(this, (ComponentWithDataProviders.__proto__ || Object.getPrototypeOf(ComponentWithDataProviders)).apply(this, arguments));
      }

      _createClass(ComponentWithDataProviders, [{
        key: 'getDispatch',
        value: function getDispatch() {
          return this.context.store && this.context.store.dispatch || undefined;
        }
      }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.id = idg.next();
          this.loadingComponent = _config.cfg.loadingComponent;
          this.errorComponent = _config.cfg.errorComponent;
          this.handleUpdate(this.props);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (!_lodash2.default.isEqual(this.props, nextProps)) {
            this.handleUpdate(nextProps);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _storage.getDPsForUser)(this.id)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _ref = _step.value;
              var dpId = _ref.id;

              (0, _storage.removeDpUser)(dpId, this.id);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }, {
        key: 'handleUpdate',
        value: function handleUpdate(props) {
          var _this4 = this;

          var newDataProviders = {};
          var oldDataProviders = (0, _storage.getDPsForUser)(this.id);

          var _loop = function _loop(dpConfig) {
            var ref = dpConfig.ref,
                rawGetData = dpConfig.getData,
                rawOnData = dpConfig.onData,
                _dpConfig$onAbort = dpConfig.onAbort,
                rawOnAbort = _dpConfig$onAbort === undefined ? _util.defaultOnAbort : _dpConfig$onAbort,
                initialData = dpConfig.initialData,
                polling = dpConfig.polling,
                needed = dpConfig.needed,
                injectLoading = dpConfig.injectLoading,
                loadingComponent = dpConfig.loadingComponent,
                errorComponent = dpConfig.errorComponent,
                _dpConfig$responseHan = dpConfig.responseHandler,
                responseHandler = _dpConfig$responseHan === undefined ? _config.cfg.responseHandler : _dpConfig$responseHan,
                _dpConfig$keepAliveFo = dpConfig.keepAliveFor,
                keepAliveFor = _dpConfig$keepAliveFo === undefined ? 0 : _dpConfig$keepAliveFo;

            (0, _util.assert)(Number.isInteger(keepAliveFor) && keepAliveFor >= 0, 'Parameter keepAliveFor must be a positive Integer or 0');

            _this4.loadingComponent = loadingComponent === undefined ? _this4.loadingComponent : loadingComponent;
            _this4.errorComponent = errorComponent === undefined ? _this4.errorComponent : errorComponent;

            var dpId = (0, _storage.findDpWithRef)(ref);

            if (dpId == null) {
              (0, _util.assert)(rawOnData != null && rawGetData != null, 'Parameters onData, getData have to be provided, if data' + ('provider was not defined yet. See DP ' + ref));

              dpId = idg.next();
              (0, _storage.addDataProvider)({
                id: dpId,
                ref: ref,
                rawGetData: rawGetData,
                getData: rawGetData instanceof Function ? rawGetData : function () {
                  return (0, _util.call)(rawGetData);
                },
                rawOnData: rawOnData,
                onData: function onData(data) {
                  return rawOnData instanceof Function ? rawOnData(ref, data, _this4.getDispatch()) : (0, _util.call)(rawOnData)(ref, data, _this4.getDispatch());
                },
                rawOnAbort: rawOnAbort,
                onAbort: function onAbort(errorData) {
                  return rawOnAbort instanceof Function ? rawOnAbort(ref, errorData, _this4.getDispatch()) : (0, _util.call)(rawOnAbort)(ref, errorData, _this4.getDispatch());
                },
                initialData: initialData,
                responseHandler: responseHandler,
                keepAliveFor: keepAliveFor
              });
            }

            var dp = (0, _storage.getDataProvider)(dpId);

            // Changing onData for existing data provider is not currently
            // supported
            (0, _util.assert)(rawOnData == null || rawOnData instanceof Function || _lodash2.default.isEqual(rawOnData, dp.rawOnData), 'Provided onData for DP ' + ref + '\n' + rawOnData + '\n' + ('is not equal to previous onData\n' + dp.rawOnData));

            // Changing getData for existing data provider is not currently supported
            (0, _util.assert)(rawGetData == null || rawGetData instanceof Function || _lodash2.default.isEqual(rawGetData, dp.rawGetData), 'Provided getData for DP ' + ref + '\n' + rawGetData + '\n' + ('is not equal to previous getData\n' + dp.rawGetData));

            (0, _util.assert)(rawOnAbort == null && dp.rawOnAbort == null || rawOnAbort instanceof Function || _lodash2.default.isEqual(rawOnAbort, dp.rawOnAbort), 'Provided onAbort for DP ' + ref + '\n' + rawOnAbort + '\n' + ('is not equal to previous onAbort\n' + dp.rawOnAbort));

            (0, _storage.addUserConfig)(_this4.id, dpId, {
              needed: needed,
              polling: polling,
              injectLoading: injectLoading,
              refreshFn: _this4.forceUpdate.bind(_this4)
            });
            newDataProviders[dpId] = dp.ref;
          };

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = getConfig(props)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var dpConfig = _step2.value;

              _loop(dpConfig);
            }

            // this is used when handleUpdate is called for existing component, but with new props,
            // so its data providers could've changed
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = oldDataProviders[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _ref2 = _step3.value;
              var _dpId = _ref2.id;

              if (!_lodash2.default.has(newDataProviders, _dpId)) {
                (0, _storage.removeDpUser)(_dpId, this.id);
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var _lo$entries$reduce = _lodash2.default.entries((0, _storage.getAllUserConfigs)(this.id)).reduce(function (_ref3, _ref4) {
            var show = _ref3.show,
                error = _ref3.error,
                fetching = _ref3.fetching;

            var _ref5 = _slicedToArray(_ref4, 2),
                dpId = _ref5[0],
                _ref5$ = _ref5[1],
                needed = _ref5$.needed,
                injectLoading = _ref5$.injectLoading;

            return {
              show: show && (!needed || (0, _storage.getDataProvider)(dpId).loaded),
              error: error || needed && (0, _storage.getDataProvider)(dpId).error,
              fetching: fetching || !needed && !(0, _storage.getDataProvider)(dpId).loaded && injectLoading
            };
          }, { show: true, error: false, fetching: false }),
              show = _lo$entries$reduce.show,
              error = _lo$entries$reduce.error,
              fetching = _lo$entries$reduce.fetching;

          var injectedProps = fetching ? { dataProviderLoading: fetching } : {};
          return error ? this.errorComponent : show ? _react2.default.createElement(Component, _extends({}, this.props, injectedProps)) : this.loadingComponent;
        }
      }]);

      return ComponentWithDataProviders;
    }(_react2.default.Component), _class.contextTypes = {
      store: _propTypes2.default.object
    }, _temp;
  };
}